/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cs261;

import java.sql.*;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    @Test
    void testDB() throws SQLException {

        try {
            Class.forName("org.sqlite.JDBC");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        DBConnection db = new DBConnection("jdbc:sqlite:database/database.db");

        User u1 = new User("", "", "");
        User u2 = new User("F2", "L2", "2222@email.com");
        String token1, token2 = "";

        try {
            // Test db.createUser
            u1 = new User("F1", "L1", "1111@email.com");
            db.createUser(u1, "0001", "1");
            // Test db.newToken
            token1 = db.newToken(1);
            // Test db.getUserByToken
            assertNotNull(db.getUserByToken(token1), "getUserByToken fail");
            token2 = db.newToken(1);
            assertNull(db.getUserByToken(token1), "getUserByToken fail");
            assertNotNull(db.getUserByToken(token2), "getUserByToken fail");
        } catch (SQLException e) {
            System.out.println("createUser, newToken, getUserByToken fail");
        }

        try {
            // Test db.expireToken
            assertTrue(db.expireToken(token2));
        } catch (SQLException e) {
            System.out.println("expireToken fail");
        }

        try {
            // Test db.getUserByEmail
            assertNotNull(db.getUserByEmail("1111@email.com"));
            assertNull(db.getUserByEmail("0000@email.com"));
        } catch (SQLException e) {
            System.out.println("getUserByEmail fail");
        }

        try {
            // Test db.getUserByID
            assertNotNull(db.getUserByID(1));
            assertNull(db.getUserByID(2));
        } catch (SQLException e) {
            System.out.println("getUserByID fail");
        }

        try {
            // Test db.verifyPassword
            assertNull(db.verifyPassword("1111@email.com", "0000"), "DBConnection.verifyPassword fail");
            assertNull(db.verifyPassword("0000@email.com", "0001"), "DBConnection.verifyPassword fail");
            assertNotNull(db.verifyPassword("1111@email.com", "0001"), "DBConnectiondb.verifyPassword fail");
        } catch (SQLException e) {
            System.out.println("verifyPassword fail");
        }

        try {
            // Test db.createSession
            HostSesh s = new HostSesh("ABCDEF", "1", "test", u1, "abcdef");
            db.createSession(s);
        } catch (SQLException e) {
            System.out.println("createSession fail");
        }

        try {
            // Test db.sessionExists
            assertTrue(db.sessionExists("ABCDEF"));
        } catch (SQLException e) {
            System.out.println("sessionExists fail");
        }

        try {
            // Test db.getHostSessionByID
            assertNotNull(db.getHostSessionByID("ABCDEF"));
        } catch (SQLException e) {
            System.out.println("getHostSessionByID fail");
        }

        try {
            // Test db.getSessionPassword
            assertEquals("abcdef", db.getSessionPassword("ABCDEF"));
        } catch (SQLException e) {
            System.out.println("getSessionPassword fail");
        }

        try {
            // Test db.createQuestion
            Question q = new Question("Q1?", false, false);
            db.createQuestion(q, "ABCDEF");
        } catch (SQLException e) {
            System.out.println("createQuestion fail");
        }

        try {
            // Test db.questionExitsts
            assertTrue(db.questionExists("ABCDEF", 0));
        } catch (SQLException e) {
            System.out.println("questionExists fail");
        }

        try {
            // Test db.createAnswer
            java.util.Date t = new java.util.Date();
            Answer a = new Answer(u1, 1, "A1", t, true);
            db.createAnswer(a, "ABCDEF", 0);
        } catch (SQLException e) {
            System.out.println("createAnswer fail");
        }

        try {
            // Test db.addModerator
            assertTrue(db.addModerator(u1, "ABCDEF"));
        } catch (SQLException e) {
            System.out.println("addModerator fail");
        }

        try {
            // Test db.emailExits
            assertTrue(db.emailExists("1111@email.com"));
            assertFalse(db.emailExists("2222@email.com"));
        } catch (SQLException e) {
            System.out.println("emailExists fail");
        }

        try {
            // Test db.userIsModerator

            db.createUser(u2, "0002", "2");
            assertTrue(db.userIsModerator(u1, "ABCDEF"));
            assertFalse(db.userIsModerator(u2, "ABCDEF"));
            assertEquals(1, db.getSessionModerators("ABCDEF").size());
        } catch (SQLException e) {
            System.out.println("userIsModerator fail");
        }

        try {
            // Test db.setModerator
            assertFalse(db.addModerator(u2, "ABCDEF"));
            assertTrue(db.userIsModerator(u2, "ABCDEF"));
            assertEquals(2, db.getSessionModerators("ABCDEF").size());
        } catch (SQLException e) {
            System.out.println("setModerator fail");
        }

        try {
            // Test db.userIsSessionHost
            if (db.userIsSessionHost(u1, "ABCDEF") && !db.userIsSessionHost(u2, "ABCDEF")) {
                assertTrue(true);
            }
        } catch (SQLException e) {
            System.out.println("userIsSessionHost fail");
        }

        try {
            // Test db.sessionEnded
            assertFalse(db.sessionEnded("ABCDEF"));
        } catch (SQLException e) {
            System.out.println("sessionEnded fail");
        }

        try {
            // Test db.endSession
            assertTrue(db.endSession("ABCDEF"));
            assertTrue(db.sessionEnded("ABCDEF"));
        } catch (SQLException e) {
            System.out.println("endSession fail");
        }

        try {
            // Test db.addUserToSession
            User u3 = new User("F3", "L3", "3333@email.com");
            db.createUser(u3, "0003", "3");
            assertTrue(db.addUserToSession("ABCDEF", 3));
        } catch (SQLException e) {
            System.out.println("addUserToSession fail");
        }

        try {
            // Test db.userIsAttendee
            assertTrue(db.userIsAttendee("ABCDEF", 3));
            assertFalse(db.userIsAttendee("ABCDEF", 2));
        } catch (SQLException e) {
            System.out.println("userIsAttendee fail");
        }

        try {
            // Test db.deleteSession
            assertTrue(db.deleteSession("ABCDEF"));
            assertNull(db.getHostSessionByID("ABCDEF"));
        } catch (SQLException e) {
            System.out.println("deleteSession fail");
        }

    }
}
