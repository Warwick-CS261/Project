CREATE TABLE USER (
  id INTEGER PRIMARY KEY,-- Incrementing sequence
  fName VARCHAR(30),
  lName VARCHAR(30),
  email VARCHAR(320),
  phash VARCHAR(60),
  salt VARCHAR(60),
);

CREATE TABLE USER_TOKEN (
  userID INTEGER FOREIGN KEY REFERENCES USER(id),
  token VARCHAR(64),
);

CREATE TABLE SERIES (
  id INTEGER PRIMARY KEY,
  seriesName VARCHAR(30),
);

--CREATE SEQUENCE uID_seq;
--id INTEGER NOT NULL DEFAULT nextval('uID_sq')

CREATE TABLE SESH (
  id VARCHAR(6) PRIMARY KEY,--function needs to generate
  seriesID INTEGER FOREIGN KEY REFERENCES SERIES(id),
  sname VARCHAR(30),
  mood FLOAT,
  secure VARCHAR(6), -- security password or NULL
  userID INTEGER FOREIGN KEY REFERENCES USER(id),
  ended BIT,
);

CREATE TABLE MOOD_DATE (
  sessionID VARCHAR(6) FOREIGN KEY REFERENCES SESH(id),
  stamp DATETIME,
  mood FLOAT,
);

CREATE TABLE RESPONSE (
  qID INTEGER FOREIGN KEY REFERENCES QUESTION(id),
  userID INTEGER FOREIGN KEY REFERENCES USER(id),
  reaction VARCHAR(10), -- values 'sad', 'happy', 'bored' etc. 
  stamp DATETIME, -- time of reaction received (required for reaction-time diagram)
  anon BIT,
  context VARCHAR(256) -- context to feedback from the requirements
)

CREATE TABLE MODERATOR_SESSION (
  userID INTEGER FOREIGN KEY REFERENCES USER(id),
  sessionID VARCHAR(6) FOREIGN KEY REFERENCES SESH(id),
);

CREATE TABLE ATTENDEE_SESSION (
  userID INTEGER FOREIGN KEY REFERENCES USER(id)
  sessionID VARCHAR(6) FOREIGN KEY REFERENCES SESH(id),
);

CREATE TABLE QUESTION (
  id INTEGER PRIMARY KEY,
  sessionID VARCHAR (6) FOREIGN KEY REFERENCES SESH(id),
  question VARCHAR(100),
  pushed BIT,
);

CREATE TABLE MESSAGES (
  sessionID VARCHAR(6) FOREIGN KEY REFERENCES SESH(id),
  msg VARCHAR(1000),
  userID INTEGER FOREIGN KEY REFERENCES USER(id),
  stamp DATETIME,
  anon BIT,
)

CREATE TABLE SESSION_WORD (
  seesionID VARCHAR(6) FOREIGN KEY REFERENCES SESH(id),
  word VARCHAR(10),
  mood FLOAT,
  num INTEGER,
);